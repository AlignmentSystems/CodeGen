package ${packagename};


${author}
${creationDate}

public class ${className} implements Serializable {

 /** Serial Version UID. */
 private static final long serialVersionUID = 1L;

#foreach($property in $properties )
 private $property.getFieldTypeImplementationLanguage() $property.getFieldNameLowercaseFirstLetter();
#end 

//Implementation required



//Implementation required fields...


//Header fields....


#set($space=" ")
#set($comma=",")
#set($equals="=")

#foreach($property in $properties )
#if( $foreach.index ==0) #set($foo=$property.getFieldTypeImplementationLanguage()+$space+$property.getFieldNameLowercaseFirstLetter()+$space+$comma+$space) 
#else
#if( $foreach.hasNext )
#set($foo=$foo+$property.getFieldTypeImplementationLanguage()+$space+$property.getFieldNameLowercaseFirstLetter()+$space+$comma+$space) 
#else
#set($foo=$foo+$property.getFieldTypeImplementationLanguage()+$space+$property.getFieldNameLowercaseFirstLetter())
#end
#end 
#end 

public ${className}($foo){
#foreach($property in $properties )
#if( $foreach.hasNext )
	this.$property.fieldName$space$equals$space$property.getFieldNameLowercaseFirstLetter()$space$comma
#else
	this.$property.fieldName$space$equals$space$property.getFieldNameLowercaseFirstLetter()
#end
#end 
}


@Override
public boolean putByteBuffer(ByteBuffer payload) throws NotImplementedException {

		Boolean returnValue = Boolean.FALSE;
		int initialPosition = 0;

		try {
			initialPosition = payload.position();
			
			//implementation goes here!

			}
		} catch (Exception e) {
			log.error(e.toString(),e);
			returnValue = Boolean.FALSE;
		}
		return returnValue;
}


@Override
public ByteBuffer getByteBuffer()  throws NotImplementedException {
		try {
			final ByteOrder boSBE = ByteOrder.BIG_ENDIAN;
			byte[] signThis = null;

			//implementation goes here!

			return ByteBuffer.wrap(signThis); 
		} catch (Exception e) {
			log.error(e.toString(),e);
			return null;
		}
}


	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
public String toString() {
	return "${className} ["	 
	#foreach($property in $properties )
	#if( $foreach.index ==0) 
	+ "${property.getFieldNameLowercaseFirstLetter()} =" + ${property.getFieldNameLowercaseFirstLetter()}
 	#else
 	#if( $foreach.hasNext )
	+ ", ${property.getFieldNameLowercaseFirstLetter()} =" + ${property.getFieldNameLowercaseFirstLetter()}
	#else
	+ ", ${property.getFieldNameLowercaseFirstLetter()} =" + ${property.getFieldNameLowercaseFirstLetter()};
}
#end
#end
#end



 
#foreach($property in $properties )
 public ${property.getFieldTypeImplementationLanguage()} get${property.getProperFieldName()}() {
     return this.${property.getFieldNameLowercaseFirstLetter()};
 }
 
 public void set${property.getProperFieldName()}(${property.getFieldTypeImplementationLanguage()} ${property.getFieldNameLowercaseFirstLetter()}) {
     this.${property.getFieldNameLowercaseFirstLetter()} = ${property.getFieldNameLowercaseFirstLetter()};
 } 
#end
}